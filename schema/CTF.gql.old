# === CURRENTLY UNNAMED CTF PLATFORM API VERSION 1.0.0 === #

type Query{
	"""
	Get the current SemVer-compliant API version
	Currently `1.0.0`
	"""
	apiVersion: String!
	"""
	Gets the scoreboard.
	Returns the scoreboard or null with errors.
	"""
	scoreboard(
		"""
		The number of teams to skip.
		Defaults to 0
		"""
		skip: Int
		"""
		The limit of teams, with a maximum of 100.
		Defaults to 100
		"""
		limit: Int
		"""
		The session to use
		"""
		session: SessionToken!
	): Scoreboard
}

type Mutation{
	"""
	Log in with credentials.
	Returns a session token or null with errors.
	"""
	login(
		"""
		The credentials to use
		"""
		credentials: InputCreds!
	): SessionToken
	"""
	Log out and revoke a token.
	Returns true if it worked or null with errors.
	"""
	logout(
		"""
		The session to revoke
		"""
		session: SessionToken!
	): Boolean
	"""
	Registers a user and logs in with it.
	Returns a session token or null with errors.
	"""
	registerUser(
		"""
		The user to register
		"""
		user: InputUser!
		"""
		The team to register/join on signup, if any
		"""
		team: InputTeamRegistrationOnSignup
	): SessionToken
	"""
	Registers a team.
	Returns true if it worked or null with errors.
	"""
	registerTeam(
		"""
		The team to register
		"""
		team: InputTeam!
		"""
		The session to use
		"""
		session: SessionToken!
	): Boolean
	"""
	Joins a team.
	Returns true if it worked or null with errors.
	"""
	joinTeam(
		"""
		The team to join
		"""
		team: InputTeam!
		"""
		The session to use
		"""
		session: SessionToken!
	): Boolean
}

"""
A session token in the form of a JSON Web Token (JWT).
It may contain any application-specific data.
If a query or mutation requests a session token, it probably
means that it requires authentication.
"""
scalar SessionToken

"""
A user to register
`username` and `email` must be unique
"""
input InputUser{
	"""
	A case-insensitive username
	"""
	username: String!
	"""
	A cleartext password
	"""
	password: String!
	"""
	A case-insensitive email
	"""
	email: String!
}

"""
Input credentials to log in with.
Either `username` or `email` must be specified.
"""
input InputCreds{
	"""
	A case-insensitive username
	"""
	username: String
	"""
	A cleartext password
	"""
	password: String!
	"""
	A case-insensitive email
	"""
	email: String
}

"""
A scoreboard response.
Limited to a maximum of 100 results.
"""
type Scoreboard{
	"""
	The total number of results in this response.
	"""
	totalTeams: Int!
	"""
	The maximum number of points possible.
	"""
	maxPoints: Int!
	"""
	Your team's scoreboard placing, if you are on one.
	"""
	you: ScoreboardTeam
	"""
	The top `n` teams with a maximum of 100 results
	See Query::scoreboard
	"""
	teams: [ScoreboardTeam!]!
}

"""
A team on the scoreboard.
"""
type ScoreboardTeam{
	"""
	The team's name
	"""
	name: String!
	"""
	The team's points
	"""
	points: Int!
	"""
	The team's place on the leaderboard
	"""
	place: Int!
}

"""
Whether to `JOIN` or `REGISTER` the team on signup
"""
enum TeamRegistrationType{
	JOIN
	REGISTER
}

"""
A metadata type for team registration on signup.
"""
input InputTeamRegistrationOnSignup{
	"""
	The team itself
	"""
	team: InputTeam!
	"""
	The type of registration
	"""
	type: TeamRegistrationType!
}

"""
A team to register or join
"""
input InputTeam{
	"""
	A case-insensitive team name
	"""
	teamName: String!
	"""
	A cleartext invite code. Treat this like a password.
	"""
	inviteCode: String!
}
schema{
	query: Query,
	mutation: Mutation
}